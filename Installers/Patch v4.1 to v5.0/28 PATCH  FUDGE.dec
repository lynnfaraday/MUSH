@@ Faraday's FUDGE Skills/Chargen System
@@ Author:  Linda O'Meara
@@ Website: http://code.google.com/p/faramushcode/
@@
@@ Visit the website for documentation, installation instructions, bug reports,
@@ and more.

@set me=quiet

@pemit/silent %#=[ansi(hg,Beginning FUDGE Installation.   Please wait until the Installation Complete message appears...)]%R

think install_patch(FUDGE_CMD,FUDGE Skill System,1,0,5.0,FUDGE Skills.)
think install_patch(FUDGE_FUN,FUDGE Skill Functions,1,1,5.0,Functions for the FUDGE skills system.)
think install_patch(FUDGE_DB,FUDGE Skill Data,0,1,5.0,FUDGE Skill Data)
think install_patch(FUDGE_CMD_CGINFO,Chargen Info Commands,1,0,5.0,FUDGE Chargen Commands)
think install_patch(FUDGE_CGINFO_FUN,Chargen Info Functions,1,1,5.0,FUDGE Chargen Functions)
think install_patch(FUDGE_CMD_XP,XP System,1,0,5.0,FUDGE XP)
think install_patch(FUDGE_XP_DB,XP Data,0,1,5.0,FUDGE XP Data)
think install_patch(FUDGE_PROFILE,Profile Commands,1,0,5.0,Chargen Profile Commands,CREATOR)
think install_patch(FUDGE_DEMO,Demographic Commands,1,0,5.0,Chargen Demographic Commands,CREATOR)
think install_patch(FUDGE_CHARGEN,Skill Chargen Commands,1,0,5.0,Chargen Skill Commands,CREATOR)
think install_patch(FUDGE_PACKAGES,Chargen Skill Packages,0,1,5.0,FUDGE Skill Packs,CREATOR)
think install_patch(FUDGE_CGEXIT,Chargen Exit Parent,0,0,5.0,Chargen exit parent.)

@pemit/silent %#=[ansi(hg,Setting Object Attributes...)]%R


&CMD-+ATTRIBUTES FUDGE Skill System=$+attributes:think pemit(%#,[line()]%R[ansi(hg,Attributes List)]%R[table(sort(u(#FUDGE_FUN/fun_attr_list)),25,78)]%R%RSee [ansi(h,+attributes <attr>)] for a description of each attribute.%RSee [ansi(h,+attributes/all)] to view all of them at once.%R[line()])
&CMD-+ATTRIBUTES-ALL FUDGE Skill System=$+attributes/all:think pemit(%#,[iter(u(#FUDGE_FUN/fun_attr_list),%R[ansi(hc,##)]%R%T[u(#FUDGE_DB/attr_desc_##)])])
&CMD-+ATTRIBUTES-DESC FUDGE Skill System=$+attributes *:think pemit(%#,switch(0,u(#FUDGE_FUN/fun_is_valid_attr,%0),ansi(hr,That is not a valid attribute.),[line()]%R[ansi(hm,capstr_all(%0))]%R[line2()]%R[u(#FUDGE_DB/attr_desc_[trim(%0)])]%R[line()]))
&CMD-+ROLL FUDGE Skill System=$+roll *:think switch(%0,*/*=*/*,,[setq(0,u(#FUDGE_FUN/fun_parse_roll_params,%0))][setq(1,u(#FUDGE_FUN/fun_translate_level,first(%q0),%#))][setq(2,last(%q0))][setq(3,u(#FUDGE_FUN/fun_get_rolled_degree,%q1,%q2))][switch(%q1,#-1,pemit(%#,ansi(hr,That is not a valid skill\, attribute or trait level.)),u(#FUDGE_FUN/FUN_NOTIFY_ROLL_RESULTS,%l,[ansi(hy,<Trait Roll>)] %N rolls [capstr_all(%0)] and achieves a degree of [u(#FUDGE_FUN/fun_level_name,%q3)] \([u(#FUDGE_FUN/fun_print_num,%q3)]\). [switch(%qb,-1,[ansi(hr,***BOTCH***)],1,[ansi(hg,***CRITICAL SUCCESS***)])]))])
&CMD-+ROLL-OPPOSED FUDGE Skill System=$+roll */*=*/*:think [setq(0,u(#FUDGE_FUN/fun_parse_roll_params,%1))][setq(1,u(#FUDGE_FUN/fun_translate_level,first(%q0),pmatch(%0)))][setq(2,last(%q0))][setq(3,u(#FUDGE_FUN/fun_parse_roll_params,%3))][setq(4,u(#FUDGE_FUN/fun_translate_level,first(%q3),pmatch(%2)))][setq(5,last(%q3))][setq(6,u(#FUDGE_FUN/fun_get_rolled_degree,%q1,%q2))][setq(7,%qb)][setq(8,u(#FUDGE_FUN/fun_get_rolled_degree,%q4,%q5))][setq(9,%qb)][switch(#-1,%q1,pemit(%#,ansi(hr,%1 is not a valid skill\, attribute or trait level.)),%q3,pemit(%#,ansi(hr,%3 is not a valid skill\, attribute or trait level.)),[u(#FUDGE_FUN/fun_notify_roll_results,%l,[ansi(hy,<Opposed Roll>)] [ansi(hg,[capstr(%0)] - [capstr_all(%1,_)])] versus [ansi(hr,[capstr(%2)] - [capstr_all(%3,_)])]%R%T<Roll1> [capstr(%0)]: [u(#FUDGE_FUN/fun_level_name,%q6)] [switch(%q7,-1,[ansi(hr,***BOTCH***)],1,[ansi(hg,***CRITICAL SUCCESS***)])]%T<Roll2> [capstr(%2)]: [u(#FUDGE_FUN/fun_level_name,%q8)] [switch(%q9,-1,[ansi(hr,***BOTCH***)],1,[ansi(hg,***CRITICAL SUCCESS***)])]%R%T<Result> [switch(1,eq(%q6,%q8),DRAW!,gt(%q6,%q8),[capstr(%0)] WINS by [sub(%q6,%q8)].,[capstr(%2)] WINS by [sub(%q8,%q6)].)]))]
&CMD-+SHEET FUDGE Skill System=$+sheet:think pemit(%#,u(#FUDGE_FUN/fun_display_sheet,%#))
&CMD-+SHEET-STAFF FUDGE Skill System=$+sheet *:think pemit(%#,switch(0,or(isstaff(%#),xget(#FUDGE_DB,PLAYER_VISIBLE_SHEETS)),ansi(hr,That command is restricted to staff.),t(pmatch(%0)),ansi(hr,That is not a valid player.),u(#FUDGE_FUN/fun_display_sheet,pmatch(%0))))
&CMD-+SKILLS FUDGE Skill System=$+skills:think pemit(%#,[line()]%R[ansi(h,Skills List)][iter(lattr(#FUDGE_DB/skill_cat_*),%R%R[ansi(hr,last(##,_))]%R[table(xget(#FUDGE_DB,##),25,78)])]%R%RType [ansi(h,+skills <skill>)] for a description of each skill. %RType [ansi(h,+skills/all)] to be spammed by all the skills and their descriptions.%R[line()])
&CMD-+SKILLS-ALIAS FUDGE Skill System=$+skill *:@fo %#=+skills %0
&CMD-+SKILLS-ALL FUDGE Skill System=$+skills/all:think pemit(%#,[iter(u(#FUDGE_FUN/fun_skills_list),%R[ansi(hc,##)]%R%T[u(#FUDGE_DB/skill_desc_##)])])
&CMD-+SKILLS-CAT FUDGE Skill System=$+skills/cat:think pemit(%#,[line()]%R[ansi(h,Skills By Category)][iter(lattr(#FUDGE_DB/skill_cat_*),%R%R[ansi(hr,last(##,_))]%R[table(xget(#FUDGE_DB,##),25,78)])]%R[line()])
&CMD-+SKILLS-DESC FUDGE Skill System=$+skills *:think pemit(%#,switch(0,u(#FUDGE_FUN/fun_is_valid_skill,%0),ansi(hr,That is not a valid skill.),[line()]%R[ansi(hm,capstr_all(%0))]%R[line2()]%R[u(#FUDGE_DB/skill_desc_[trim(%0)])]%R[line()]))
@DESCRIBE FUDGE Skill System=These are the commands for the FUDGE skills system.%R%R[u(Credits)]
&CREDITS FUDGE Skill System=Version [v(version)]%R%RCoded by Faraday ~ http://www.wordsmyth.org/faraday%RBased on FUDGE rules by Steffan O'Sullivan.  See +help FUDGE.
&CMD-+SKILLCENSUS FUDGE Skill System=$+skillcensus *=*:think pemit(%#,switch(0,or(isstaff(%#),xget(#FUDGE_DB,PLAYER_VISIBLE_SHEETS)),ansi(hr,That command is restricted to staff.),u(#FUDGE_FUN/fun_is_valid_skill,%0),ansi(hr,That's not a valid skill.),u(#FUDGE_FUN/fun_is_valid_level_name,%1),ansi(hr,That's not a valid level.),[line()]%RCharacters with %0 at %1 or higher%R[iter(u(#FUDGE_FUN/fun_skill_census,%0,%1),%R[padstr(name(after(##,:)),15)][u(#FUDGE_FUN/fun_level_name,before(##,:))])]%R[line()]))
&CMD-+SKILLCENSUS-GENERAL FUDGE Skill System=$+skillcensus *:think switch(%0,*=*,,pemit(%#,switch(0,or(isstaff(%#),xget(#FUDGE_DB,PLAYER_VISIBLE_SHEETS)),ansi(hr,That command is restricted to staff.),u(#FUDGE_FUN/fun_is_valid_skill,%0),ansi(hr,That is not a valid skill.),not(match(%0,*=*)),,[line()]%RCharacters with [capstr(%0)]%R[iter(u(#FUDGE_FUN/fun_skill_census,%0,Poor),%R[padstr(name(after(##,:)),15)][u(#FUDGE_FUN/fun_level_name,before(##,:))])]%R[line()])))


@STARTUP FUDGE Skill Functions=@fun TRAIT_NUM=[num(me)],FUN_GET_TRAIT_LVL_NUM;@fun TRAIT_NAME=[num(me)],FUN_GET_TRAIT_LVL_NAME;@fun ROLL_TRAIT=[num(me)],FUN_GET_ROLLED_DEGREE;@FUN ROLL_PLAYER_TRAIT=[num(me)],FUN_ROLL_PLAYER_TRAIT;@fun LEVEL_NUM=[num(me)],FUN_LEVEL_NUM;@fun LEVEL_NAME=[num(me)],FUN_LEVEL_NAME;@fun PRETTY_LEVEL_NUM=[num(me)],FUN_PRINT_NUM
&FUN_ATTR_LIST FUDGE Skill Functions=iter(lattr(#FUDGE_DB/ATTR_DESC_*),capstr_all(lcstr(after(after(##,_),_)),_))
&FUN_SKILLS_LIST FUDGE Skill Functions=iter(lattr(#FUDGE_DB/SKILL_DESC_*),capstr_all(lcstr(after(after(##,_),_)),_))
&FUN_NOTIFY_ROLL_RESULTS FUDGE Skill Functions=[remit(%0,%1)][cemit(SkillRolls,<[ansi(hc,SkillRolls)]> %1
&FUN_SKILL_CENSUS FUDGE Skill Functions=localize([iter(lsearch(all,type,player),[setq(0,[u(#FUDGE_FUN/fun_get_trait_lvl_num,##,%0)])][switch(gte(%q0,u(#FUDGE_FUN/fun_level_num,%1)),1,setq(1,%q1 %q0:##))])][sort(%q1,n)])
&FUN_DISPLAY_SHEET FUDGE Skill Functions=[line()]%R[center([xget(%0,fullname)] \([name(%0)]\),78)]%R%R[ansi(hr,Physical Profile)]%R[line2()]%R[padstr([ansi(h,Height:%B%B%B%B)] [xget(%0,height)],38)][ansi(h,Weight:)] %B%B%B%B[xget(%0,weight)]%R[padstr([ansi(h,Hair Color:)] [xget(%0,hair)],38)][ansi(h,Eye Color:)] %B[xget(%0,eyes)]%R[padstr([ansi(h,Skin Color:)] [xget(%0,skin)],38)][ansi(h,Handedness:)] [xget(%0,hand)]%R%R[ansi(hb,Demographics)]%R[line2()]%R[padstr([ansi(h,Faction:)][space(4)][xget(%0,faction)],38)][ansi(h,Org:)][space(8)][xget(%0,org)]%R[padstr([ansi(h,Position:)]%B%B%B[xget(%0,position)],38)][ansi(h,Age:)][space(8)][age(%0)] \([u(#FUDGE_CGINFO_FUN/fun_display_birthdate,%0)]\)%R%R[ansi(hg,Attributes)]%R[line2()]%R[table(iter(xget(%0,attributes),[padstr(ansi(h,[before(##,:)]:),15)]%B[u(fun_print_name_and_num,after(##,:))],,|),37,78,|)]%R%R[ansi(hm,Skills)]%R[line2()]%R[table(iter(sort(xget(%0,skills)),[padstr(ansi(h,[before(##,:)]:),15)]%B[u(fun_print_name_and_num,after(##,:))],,|),37,78,|)]%R%R[ansi(h,Experience Points:)] [xget(%0,xp)]%R[line()]
&FUN_GET_RELATIVE_DEGREE FUDGE Skill Functions=sub(u(fun_get_rolled_degree,%0,%1),u(fun_get_rolled_degree,%2,%3))
&FUN_GET_ROLLED_DEGREE FUDGE Skill Functions=add(%0,u(fun_roll_fudge_dice),%1)
&FUN_GET_TRAIT_LVL_NAME FUDGE Skill Functions=u(fun_level_name,u(fun_get_trait_lvl_num,%0,%1))
&FUN_GET_TRAIT_LVL_NUM FUDGE Skill Functions=localize([setq(9,grab(xget(%0,[switch(u(#FUDGE_FUN/FUN_IS_VALID_ATTR,%1),1,attributes,skills)]),%1:*))][switch(%q9,*:*,after(%q9,:),[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)])])
&FUN_ROLL_PLAYER_TRAIT FUDGE Skill Functions=u(fun_get_rolled_degree,u(fun_get_trait_lvl_num,%0,%1),%2)
&FUN_IS_VALID_ATTR FUDGE Skill Functions=hasattr(#FUDGE_DB,ATTR_DESC_%0)
&FUN_IS_VALID_LEVEL_NAME FUDGE Skill Functions=t(match(xget(#FUDGE_DB,trait_levels),%0:*))
&FUN_IS_VALID_LEVEL_NUM FUDGE Skill Functions=t(match(xget(#FUDGE_DB,trait_levels),*:%0))
&FUN_IS_VALID_SKILL FUDGE Skill Functions=hasattr(#FUDGE_DB,SKILL_DESC_%0)
&FUN_LEVEL_NAME FUDGE Skill Functions=before(grab(xget(#FUDGE_DB,trait_levels),*:%0),:)
&FUN_LEVEL_NUM FUDGE Skill Functions=after(grab(xget(#FUDGE_DB,trait_levels),%0:*),:)
&FUN_PARSE_ROLL_PARAMS FUDGE Skill Functions=[switch(%0,*+*,[trim(before(%0,+))] [trim(after(%0,+))],*-*,[trim(before(%0,-))] -[trim(after(%0,-))],%0 0)]
&FUN_PRINT_NAME_AND_NUM FUDGE Skill Functions=[u(fun_level_name,%0)] \([u(fun_print_num,%0)]\)
&FUN_PRINT_NUM FUDGE Skill Functions=sub(%0,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)])
&FUN_ROLL_FUDGE_DICE FUDGE Skill Functions=[setq(z,switch(die(3,6),3,-4,4,-4,5,-3,6,-2,7,-2,8,-1,9,-1,10,0,11,0,12,1,13,1,14,2,15,2,16,3,17,4,18,4))][switch(%qz,-4,setq(b,-1),4,setq(b,1),setq(b,0))]%qz
&FUN_SKILLS_ABOVE_LVL Skill Functions=localize([setq(0,0)][iter(xget(%0,skills),switch(gt(after(##,:),%1),1,setq(0,inc(%q0))),,)]%q0)
&FUN_ATTRS_ABOVE_LVL Skill Functions=localize([setq(0,0)][iter(xget(%0,attributes),switch(gt(after(##,:),%1),1,setq(0,inc(%q0))),,)]%q0)
&FUN_MAX_SKILLS_ABOVE_LVL Skill Functions=switch(hasattr(#FUDGE_DB,MAX_SKILLS_ABOVE_%0),1,xget(#FUDGE_DB,MAX_SKILLS_ABOVE_%0),9999)
&FUN_MAX_ATTRS_ABOVE_LVL Skill Functions=switch(hasattr(#FUDGE_DB,MAX_ATTRIBUTES_ABOVE_%0),1,xget(#FUDGE_DB,MAX_ATTRIBUTES_ABOVE_%0),9999)
&FUN_SET_TRAIT FUDGE Skill Functions=switch(u(#FUDGE_FUN/FUN_IS_VALID_ATTR,%1),1,u(#FUDGE_FUN/FUN_SET_ATTR,%0,%1,%2),u(#FUDGE_FUN/FUN_SET_SKILL,%0,%1,%2))
&FUN_SET_ATTR FUDGE Skill Functions=set(%0,attributes:[find_and_replace(xget(%0,attributes),%1:*,%1:%2)])
&FUN_SET_SKILL FUDGE Skill Functions=localize([setq(0,xget(%0,skills))][switch(0,gt(%2,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)]),set(%0,skills:[remove(%q0,extract(%q0,match(%q0,%1:*),1))]),match(%q0,%1:*),set(%0,skills:[trim(%q0%B%1:%2)]),set(%0,skills:[trim(find_and_replace(%q0,%1:*,%1:%2))]))])
&FUN_TRANSLATE_LEVEL FUDGE Skill Functions=switch(1,u(#FUDGE_FUN/fun_is_valid_level_name,%0),u(#FUDGE_FUN/fun_level_num,%0),u(#FUDGE_FUN/fun_get_trait_lvl_num,%1,%0))
&HELP_SKILLS FUDGE Skill Functions=This MUSH uses a skills system based on the FUDGE rules, copyright by Steffan O'Sullivan.%R%R[ansi(h,+sheet)] - Displays your character sheet.[switch(xget(#FUDGE_DB,PLAYER_VISIBLE_SHEETS),1,%R[ansi(h,+sheet <player>)] - View someone else's sheet.  Don't abuse this info.)]%R[ansi(h,+limits)] - Views skill and attribute limits.%R%R[ansi(h,+roll <trait + optional modifier>)]%RThis roll command is used when there is no direct opponent.  It will give you the degree of success.  Most tasks require only a Fair degree.  Harder tasks may require more.  You can specify an optional + or - modifier to the roll.  You can also specify a trait level (e.g. Fair or Medicore) instead of a trait name to simulate NPCs.  Examples:%R%T+roll jumping%R%T+roll strength-1%R%T+roll fair%R%R[ansi(h,+roll <name>/<trait + mod>=<name>/<trait + mod.>)] %RThis roll command is used to pit two players or NPCs against each other.  It will tell you who won, and by how much.  Again, you can use NPC names and trait levels (like Fair) to simulate NPC rolls, and you can optionally include modifiers to the roll.[switch(xget(#FUDGE_DB,PLAYER_VISIBLE_SHEETS),1,%R%R[ansi(h,+skillcensus <skill>)] - Reports what characters have that skill.%R[ansi(h,+skillcensus <skill>=<level name: good, fair, etc.>)] - Reports what characters have that skill above a certain level.)]%R%RRelated help topics:%R[ansi(h,FUDGE:)] FUDGE copyright info%R[ansi(h,TRAITS:)] Info on trait levels and descriptions.%R[ansi(h,ROLLS:)] Detailed info on how trait rolls work%R[ansi(h,PACKAGES:)] Info on skill packages, used in character generation.%R[ansi(h,XP:)] Info on experience points and improving traits.
&MORE_HELP_FUDGE FUDGE Skill Functions=FUDGE is a role-playing game written by Steffan O'Sullivan, with    extensive input from the Usenet community of rec.games.design.  The    basic rules of FUDGE are available on the internet via anonymous ftp    at ftp.csua.berkeley.edu, and in book form or on disk from Grey    Ghost Games, P.O. Box 838, Randolph, MA 02368.  They may be used    with any gaming genre.  While an individual work derived from FUDGE    may specify certain attributes and skills, many more are possible    with FUDGE.  Every Game Master using FUDGE is encouraged to add or    ignore any character traits.  Anyone who wishes to distribute such    material for free may do so - merely include this ABOUT FUDGE notice    and disclaimer (complete with FUDGE copyright notice).  If you wish    to charge a fee for such material, other than as an article in a    magazine or other periodical, you must first obtain a royalty-free    license from the author of FUDGE, Steffan O'Sullivan, P.O. Box 465,    Plymouth, NH 03264.%R%ROn the web at: http://members.dsl-only.net/~bing/frp/fudge/fudge_toc.html
&MORE_HELP_PACKAGES FUDGE Skill Functions=The skill package system lets you automatically pick skills (and minimum levels) your character should have based on his chosen profession.  Packages are just suggestions, so you can move points around after you've taken one to customize your character.  However, bear in mind that the suggestions are there for a reason.  Be prepared to have a good justification in your background if you start ditching skills.%R%RTaking a package will never LOWER any of your skills.  If you already have a skill at the minimum level or higher, it will just skip that one.  You get no point benefit from picking a package.  It costs the same as it would if you just manually took the skills.  It's just a convenience.%R%RNote that many careers will have multiple packages.  For example, it takes a lot of work to be a fighter pilot, or a doctor, so you won't have as many points for other things as most characters.%R%R[ansi(h,+package/<faction>)] - Shows faction-based skill packages%R%R[ansi(h,+package <package>)] - Views details on a package, including the skills and cost.%R[ansi(h,+package/take <package>)] - Takes a package, raising any skills you don't already have to the minimum suggested level.%R%RNOTE: You can only take a package in chargen.
&MORE_HELP_ROLLS FUDGE Skill Functions=FUDGE uses a unique die system.  You roll "FUDGE dice", which are 6-siders with the sides labeled either -1, +0, or +1.  You add the dice together to get a result from -4 to +4.  You add that to your trait level and get the final result (which is called the Rolled Degree). The degrees have the same names as the traits.  Most tasks require only a Fair degree. Others will be easier or harder.%R%RExample: Mary is trying to jump across a chasm. Its not that wide, so she only needs a Fair success (3). Her jumping skill is Good (4) and she rolls a -1. Adding the skill and roll together gives a rolled degree of Fair (3). She succeeded, but barely. If it had been a wide chasm, with a difficulty level of Good, she would have failed.%R%RA similar mechanic applies for opposed checks. Each player rolls, and you compare their rolled degrees.%R%RExample: Jane and Joe are playing tug-of-war. Theres no particular skill involved, so they both roll strength. Jane gets a rolled degree of Mediocre (2) and Joe gets a rolled degree of Good (4). Joe wins and rolled 2 levels higher than Janes roll.%R%RSometimes there are action modifiers that affect the roll. +1/-1 is normal, +2/-2 is a large modifier, and +3/-3 is an extreme modifier.%R%RIts possible to roll better than Superb and worse than Terrible. Those rolls are generally labeled with *'s BeyondSuperb*, BeyondSuperb**, etc.
&MORE_HELP_TRAITS FUDGE Skill Functions=Traits (skills and attributes) are rated in descriptive levels.  Each rating is given a number (0 to 6).%R%R[ansi(h,Level)][space(11)][ansi(h,Skill Meaning)][space(13)][ansi(h,Attribute Meaning)]%R[ljust(ansi(r,(0) Terrible),15)] [ljust(No training,25)] Near-handicapped%R[ljust(ansi(b,(1) Poor),15)] [ljust(Very basic training,25)] Seriously below average%R[ljust(ansi(m,(2) Mediocre),15)] [ljust(Casual hobbyist/student,25)] Below average%R[ljust(ansi(y,(3) Fair),15)] [ljust(Junior professional,25)] Average%R[ljust(ansi(g,(4) Good),15)] [ljust(Normal professional,25)] Above Average%R[ljust(ansi(c,(5) Great),15)] [ljust(Seasoned/Veteran,25)] Gifted%R[ljust(ansi(r,(6) Superb),15)] [ljust(World-class expert,25)] Savant %R%R[ansi(h,+skills)] - Shows the list of skills (and their descriptions)%R[ansi(h,+attributes)] - Shows you the list of attributes (and their descriptions)
&SHELP_SKILLS FUDGE Skill Functions=Staff skill commands:%R%R[ansi(h,+sheet <char>)] - Views another player's sheet.%R%R[ansi(h,+skillcensus <skill>)] - See who has that skill.%R[ansi(h,+skillcensus <skill>=<level name: good, fair, etc>)] - Sees who has that skill above that level.%R%R[ansi(h,+checkskills <player>)] - Checks a player's skills versus the packages set up for their position.  Informs you if any are too low.%R%RStaff can also use the basic +roll commands (see +help skills) to simulate rolls for NPCs.  Roll results are emitted to the [ansi(hc,SkillRolls)] channel if there is one.  Staff members can join that channel to see skill rolls from afar.%R%RSee also [ansi(h,+shelp skills_config)]
&MORE_SHELP_SKILLS_CONFIG Skill Functions=Customize skill and attribute data on object #FUDGE_DB.  Look at that object for more info.%R[ansi(hr,Important:)] Do not use spaces or hyphens in skill or attribute names.%R%RNOTE:  Although the trait numbers are displayed from 0-6 to the players, internally they are tracked as -3 to +3 because that's how FUDGE works.  Bear that in mind when editing attributes and/or tweaking the code.%R%RYou'll also need to set up a weekly cron job to run the TR-WEEKLY-XP command on the XP system.%R%RYou can integrate the skills system into your other code using the following global functions:%R%RTRAIT_NUM(<playerDB#>,<trait>) - Gets the trait value, as a number%RTRAIT_NAME(<playerDB#>,<trait>) - Gets the trait value, as a name (Good, Fair, etc)%RROLL_TRAIT(<level number - -2, 0, etc.>,<modifier>) - Rolls skill dice and reports the result (from -3 to +3 before modifiers)%RROLL_PLAYER_TRAIT(<playerDB#>,<trait>,<modifier>) - Same as roll trait, but gets the player's trait number for you.%RLEVEL_NAME(<level number>) - Given a level number (like 0), returns the name of that level (Fair)%RLEVEL_NUM(<level name>) - Given a level name (like fair), returns the level number (0)%RPRETTY_LEVEL_NUM(<level num>) - Converts a raw level num (-3 to +3) to a pretty player-friendly level (0 to 6)

&HATTR_approval_job Skill Functions=0
&HATTR_attributes Skill Functions=
&HATTR_attr_points Skill Functions=0
&HATTR_birthdate Skill Functions=
&HATTR_eyes Skill Functions=
&HATTR_hair Skill Functions=
&HATTR_hand Skill Functions=
&HATTR_height Skill Functions=
&HATTR_weight Skill Functions=
&HATTR_skin Skill Functions=
&HATTR_eyes Skill Functions=
&HATTR_date Skill Functions=\[time()\]
&HATTR_skills Skill Functions=
&HATTR_skill_points Skill Functions=0
&HATTR_xp Skill Functions=0
&HATTR_position Skill Functions=
&HATTR_faction Skill Functions=
&HATTR_org Skill Functions=
&HATTR_has_been_trained Skill Functions=0
&HATTR_has_lowered Skill Functions=0
&HATTR_has_trained Skill Functions=0
&HATTR_has_practiced Skill Functions=0
&HATTR_xpspent Skill Functions=


@DESCRIBE FUDGE Skill Data=This object stores the skills and attributes lists. %R%RATTR_DESC_<name> and SKILL_DESC_<name>: Skill/attribute descriptions%R[ansi(hr,Important:)] Do not use spaces or hyphens in skill or attribute names.%R%RSKILL_CAT_<category>: Used for +skills to list skills by category.%R%RSKILL_POINTS and ATTR_POINTS: Starting chargen skill and attribute point numbers.%R%RMAX_SKILLS_ABOVE_<level> and MAX_ATTRIBUTES_ABOVE_<level>: Configures how many different skills or attributes they can have above a certain level.  Level must be one of 0, 1, or 2.%R%RMAX_TRAIT_LEVEL and MAX_TRAIT_LEVEL: The min/max trait levels allowed in chargen and such.  Changing these from the default of +3/-3 can have serious impacts on the skill system (anyone with a skill above +3 would rarely fail) and would also require a bunch of changes to the documentation.%R%RTRAIT_LEVELS: You can change the name of the traits.%RNote that your TRAIT_LEVELS should go above the min/max to account for roll results.  (They rolled Terrible, but with a -3 modifier applied, so it's 3 beyond terrible)
@desc Chargen Skill Packages=This stores all the defined skill packages for the game.  There are three important sets of attributes:%R%RIMPORTANT_PACKS: Lists important skill packages, which will be highlighted on the lists.%R%RPACKAGE_<packname>: Defines a skill package.  Attribute stores NAME|DESCRIPTION|SKILLS|FACTIONS%R%TSKILLS should be a space-separated list of Name:Rating pairs%R%TFACTIONS should be a space-separated list of factions to which the package applies, or "All" if it applies to all factions.%R%RSTARTING_<position>: Defines the list of skill packages that will automatically be applied to someone with that position.


@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@    *****       END DATA SECTION      *****
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@wait 5=+jobs/create CODE=FUDGE Chargen Objects/After the chargen rooms are built, place the chargen objects into their appropriate rooms in Chargen.


@set Chargen Info Commands = DARK
&cmd-+limits Chargen Info Commands=$+limits:think pemit(%#,[line()]%R[ansi(h,Attribute Limits)][iter(lattr(#FUDGE_DB/MAX_ATTRIBUTES_ABOVE_*),%RAbove [u(#FUDGE_FUN/fun_level_name,[last(##,_)])] - [u(#FUDGE_FUN/FUN_MAX_ATTRS_ABOVE_LVL,[last(##,_)])])]%R%R[ansi(h,Skill Limits)][iter(lattr(#FUDGE_DB/MAX_SKILLS_ABOVE_*),%RAbove [u(#FUDGE_FUN/fun_level_name,[last(##,_)])] - [u(#FUDGE_FUN/FUN_MAX_SKILLS_ABOVE_LVL,[last(##,_)])])]%R%RPlease note that the numbers above are TOTALS. So if it says you can only have 5 skills above Fair, that means you can have 1 Superb/1 Great/3 Good, or 5 Good, or 1 Great/4 Good, or any other combination that adds up to 5.%R[line()])
&CMD-+PACKAGES-alias1 Chargen Info Commands=$+package:@fo %#=+package/[xget(%#,faction)]
&CMD-+PACKAGES-alias2 Chargen Info Commands=$+packages:@fo %#=+package/[xget(%#,faction)]
&cmd-+packages-alias3 Chargen Info Commands=$+packages/all:@fo %#=+package/all
&CMD-+PACKAGE-FACTION Chargen Info Commands=$+package/*:think switch(%0,take,,view,,switch(0,or(u(#FUDGE_CGINFO_FUN/FUN_IS_VALID_FACTION,%0),match(%0,all)),pemit(%#,ansi(hr,That is not a valid faction.)),pemit(%#,[line()]%R[ansi(hg,[capstr(%0)] Skill Packages)][iter(u(#FUDGE_CGINFO_FUN/FUN_FACTION_PACKAGES,%0),%R[padstr(switch(match(xget(#FUDGE_PACKAGES,important_packs),after(##,_)),0,after(##,_),ansi(hG,after(##,_))),15)][u(#FUDGE_CGINFO_FUN/FUN_PACKAGE_SHORT_DESC,##)])]%R%RPay particular attention to the highlighted packages.  Note that some other faction's packages may also be adaptable.  Contact staff with any questions.%R%RUse [ansi(h,+package <package>)] for details on a particular package or [ansi(h,+packages/all)] to see packages for other factions.%R[line()])))
&CMD-+PACKAGE-VIEW Chargen Info Commands=$+package *:think pemit(%#,switch(0,u(#FUDGE_CGINFO_FUN/fun_is_valid_package,%0),ansi(hr,There is no such package.),[line()]%R[ansi(h,Package %0)]%R[u(#FUDGE_CGINFO_FUN/FUN_PACKAGE_LONG_DESC,%0)]%R[u(#FUDGE_CGINFO_FUN/FUN_PRINT_PACKAGE_SKILLS,%0)]%R%R%R[ansi(hg,Your Point Cost: [u(#FUDGE_CGINFO_FUN/fun_package_cost,%0,%#)])]%R[line()]))
&CMD-+CHECKSKILLS Chargen Info Commands=$+checkskills *:think pemit(%#,switch(0,isstaff(%#),ansi(hr,This command is for staff only.),t(pmatch(%0)),ansi(hr,That is not a valid player.),[line()]%RPossible Missing Skills for %0:%R%R[u(#FUDGE_CGINFO_FUN/fun_check_packages,pmatch(%0))]%R%RRemember that some skills are just guidelines and they may have validly picked a different one instead.%R[line()]))


@STARTUP Chargen Info Functions=@set me=!no_command;@fun AGE=[num(me)],FUN_GET_AGE
&fun_display_birthdate Chargen Info Functions=[switch(xget(%0,birthdate),,-,[extract(xget(#FUDGE_CGINFO_FUN,months),before(xget(%0,birthdate),/),1)] [extract(xget(%0,birthdate),2,1,/)])
&fun_get_age Chargen Info Functions=switch(xget(%0,birthdate),,0,add(sub(last(time()),add(after(after(xget(%0,birthdate),/),/),1)),switch(match(xget(#FUDGE_CGINFO_FUN,months),extract(time(),2,1)),<[before(xget(%0,birthdate),/)],0,[before(xget(%0,birthdate),/)],switch(gte(extract(time(),3,1),before(after(xget(%0,birthdate),/),/)),1,1,0),1))
&fun_is_valid_org Chargen Info Functions=t(match(orgs(),%0))
&FUN_IS_VALID_POSITION Chargen Info Functions=t(match(positions(),%0))
&fun_is_valid_faction Chargen Info Functions=t(match(factions(),%0))
&months Chargen Info Functions=Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
&FUN_IS_VALID_PACKAGE Chargen Info Functions=hasattr(#FUDGE_PACKAGES,PACKAGE_%0)
&FUN_APPLY_PACKAGE Chargen Info Functions=localize(pemit(%1,[iter(u(#FUDGE_CGINFO_FUN/FUN_PACKAGE_SKILLS,%0),[setq(0,before(##,:))][setq(1,after(##,:))][setq(2,u(#FUDGE_FUN/fun_level_name,%q1))][switch(1,lt(u(#FUDGE_FUN/fun_get_trait_lvl_num,%1,%q0),%q1),[u(#FUDGE_FUN/fun_set_skill,%1,%q0,%q1)])])]))
&FUN_PACKAGE_LONG_DESC Chargen Info Functions=extract(xget(#FUDGE_PACKAGES,PACKAGE_%0),2,1,|)
&FUN_PACKAGE_SHORT_DESC Chargen Info Functions=extract(xget(#FUDGE_PACKAGES,PACKAGE_%0),1,1,|)
&FUN_PACKAGE_SKILLS Chargen Info Functions=extract(xget(#FUDGE_PACKAGES,PACKAGE_%0),3,1,|)
&FUN_FACTION_PACKAGES Chargen Info Functions=sort(iter(lattr(#FUDGE_PACKAGES/package_*),switch(%0,all,##,switch(extract(xget(#FUDGE_PACKAGES,##),4,1,|),*%0*,##,all,##))))
&FUN_PACKAGE_COST Chargen Info Functions=localize(squish([setq(9,0)][iter(u(FUN_PACKAGE_SKILLS,%0),[setq(9,add(%q9,max(0,sub(after(##,:),u(#FUDGE_FUN/fun_get_trait_lvl_num,%1,before(##,:))))))])]%q9))
&FUN_PRINT_PACKAGE_SKILLS Chargen Info Functions=iter(u(#FUDGE_CGINFO_FUN/FUN_PACKAGE_SKILLS,%0),%R[padstr(before(##,:),20)][u(#FUDGE_FUN/fun_print_name_and_num,after(##,:))])
&FUN_POSITION_PACKAGES Chargen Info Functions=xget(#FUDGE_PACKAGES,STARTING_%0)
&FUN_CHECK_PACKAGES Chargen Info Functions=[iter(xget(#FUDGE_PACKAGES,STARTING_[xget(%0,position)]),u(#FUDGE_CGINFO_FUN/fun_check_package,##,%0))]
&fun_check_package Chargen Info Functions=localize([iter(u(fun_package_skills,%0),[setq(0,before(##,:))][setq(1,after(##,:))][setq(2,u(#FUDGE_FUN/fun_level_name,%q1))][setq(3,u(#FUDGE_FUN/fun_get_trait_lvl_num,%1,%q0))][switch(1,lt(%q3,%q1),%R%q0: [u(#FUDGE_FUN,FUN_LEVEL_NAME,%q3)] \(Should be [u(#FUDGE_FUN,FUN_LEVEL_NAME,%q1)]\))])])


&CMD-+PRACTICE XP System=$+practice *:think [setq(1,switch(u(#FUDGE_FUN/fun_is_valid_skill,%0),1,skills,attributes))][setq(2,u(#FUDGE_FUN/fun_get_trait_lvl_num,%#,%0,%q1))][setq(6,switch(%q2,<-1,1,-1,.75,0,.5,1,.25,>1,.25))]pemit(%#,switch(0,or(u(#FUDGE_FUN/fun_is_valid_skill,%0),u(#FUDGE_FUN/fun_is_valid_attr,%0)),ansi(hr,That is not a valid skill or attribute.),not(xget(%#,has_practiced)),ansi(hr,You have already practiced once this week.),ansi(hg,You practice [capstr_all(%0,_)].  You gain %q6 XP.  Please remember to only use this command when it makes sense ICly.)[set(%#,has_practiced:1)][set(#FUDGE_XP_DB,log_practice:[xget(#FUDGE_XP_DB,log_practice)]|%N practiced %0 for %q6 XP.)][u(fun_add_xp,%#,trim(%0),%q6)])
&CMD-+TRAIN XP System=$+train *=*:think [setq(0,pmatch(%0))][setq(1,switch(u(#FUDGE_FUN/fun_is_valid_skill,%1),1,skills,attributes))][setq(2,u(#FUDGE_FUN/fun_get_trait_lvl_num,%#,%1,%q1))][setq(3,u(#FUDGE_FUN/fun_get_trait_lvl_num,%q0,%1,%q1))][setq(4,u(#FUDGE_FUN/fun_get_trait_lvl_num,%#,teaching,skills))][setq(5,u(#FUDGE_FUN/fun_get_rolled_degree,%q4,0))][setq(6,switch(%q5,<-1,0,-1,.25,0,.5,1,.75,>1,1))]pemit(%#,switch(0,or(u(#FUDGE_FUN/fun_is_valid_skill,%1),u(#FUDGE_FUN/fun_is_valid_attr,%1)),ansi(hr,That is not a valid skill or attribute.),t(%q0),ansi(hr,That is not a valid player.),not(match(%q0,%#)),ansi(hr,You can't train yourself silly!),match(lcon(%l),%q0),ansi(hr,You can't train someone who's not here.),hasflag(%q0,connected),ansi(hr,You can't train someone who's not here.),gte(%q2,%q3),ansi(hr,You can't teach someone who knows more than you.),not(xget(%#,has_trained)),ansi(hr,You have already trained someone this week.),not(xget(%q0,has_been_trained)),ansi(hr,That person has already been trained this week.),ansi(hg,You train [capstr(%0)] in [capstr_all(%1,_)].  You both gain %q6 XP.  Please remember to only use this command when it makes sense ICly.)[pemit(%q0,ansi(hg,%N trains you in [capstr_all(%1,_)].  You gain %q6 XP.))][set(#FUDGE_XP_DB,log_train:[xget(#FUDGE_XP_DB,log_train)]|%N trained %0 on %1 for %q6 XP.)][set(%#,has_trained:1)][set(%q0,has_been_trained:1)][u(fun_add_xp,%#,trim(%1),%q6)][u(fun_add_xp,%q0,trim(%1),%q6)])
&CMD-+XP XP System=$+xp:think pemit(%#,[line()]%R[ansi(h,Trait[space(15)]Spent[space(5)]To Go[space(5)]Progress)][iter(sort(xget(%#,xpspent)),%R[setq(0,u(fun_xp_to_next_lvl,%#,before(##,:)))][padstr(before(##,:),20)][padstr(after(##,:),10)][padstr(switch(%q0,9999,---,sub(%q0,after(##,:))),10)][switch(%q0,9999,---,[round(mul(fdiv(after(##,:),%q0),100),0)]\%)])]%R%RYou have [ansi(h,xget(%#,xp))] unspent XP.%R[line()])
&CMD-+XP-AWARD XP System=$+xp/award *=*/*:@switch [setq(0,pmatch(%0))]0=isstaff(%#),@pemit %#=ansi(hr,Restricted to staff.),t(%q0),@pemit %#=ansi(hr,There is no such player.),isnum(%1),@pemit %#=ansi(hr,That is not a number.),{@pemit %#=ansi(hg,You award %0 %1 XP for %2.);+bbpost 4/XP Award - [name(%q0)]=%N awarded [name(%q0)] with %1 XP for %2.;@fo %#=+mail [name(%q0)]=XP Award/Congratulations!  You have received %1 XP for %2.;think set(%q0,xp:[add(xget(%q0,xp),%1)])
&CMD-+XP-COSTS XP System=$+xp/costs:think pemit(%#,[line()]%R[ansi(hr,Experience Point Costs)]%R%R[ljust(ansi(h,CURRENT Level),25)][ljust(ansi(h,Skill Cost),20)][ljust(ansi(h,Attribute Cost),20)]%R[line2()][iter(xget(#FUDGE_FUN,trait_levels),[setq(0,after(##,:))][setq(1,u(fun_get_skill_xp_cost,%q0))][setq(2,u(fun_get_attr_xp_cost,%q0))][switch(%q1,,,%R[ljust(u(#FUDGE_FUN/fun_level_name,%q0),25)][center(%q1,10)][space(10)][center(%q2,10)])],,)]%R[line()]
&CMD-+XP-LOWER XP System=$+xp/lower *:think [setq(1,switch(u(#FUDGE_FUN/fun_is_valid_skill,%0),1,skills,attributes))][setq(2,u(#FUDGE_FUN/fun_get_trait_lvl_num,%#,%0,%q1))][setq(3,u(FUN_GET_[switch(%q1,skills,SKILL,ATTR)]_XP_COST,sub(%q2,1)))]pemit(%#,switch(0,not(hasflag(%#,unregistered)),ansi(hr,Only approved characters can use this.),or(u(#FUDGE_FUN/fun_is_valid_skill,%0),u(#FUDGE_FUN/fun_is_valid_attr,%0)),ansi(hr,That is not a valid skill or attribute.),gt(%q2,0),ansi(hr,You can't lower that any further.  Contact staff.),not(xget(%#,has_lowered)),ansi(hr,You have already lowered one trait this week.),ansi(hg,You lower %0.  You receive [div(%q3,3)] XP back.)[set(#FUDGE_XP_DB,log_xplower:[xget(#FUDGE_XP_DB,log_xplower)]|%N lowered %0 to [sub(%q2,1)])][set(%#,xp:[add(xget(%#,xp),div(%q3,3))])][set(%#,has_lowered:1)][u(#FUDGE_FUN/fun_set_[switch(%q1,skills,skill,attr)],%#,[capstr_all(%0,_)],sub(%q2,1))]))
&CMD-+XP-SPEND XP System=$+xp/spend *=*:think [setq(1,switch(u(#FUDGE_FUN/fun_is_valid_skill,%0),1,skills,attributes))][setq(2,u(#FUDGE_FUN/fun_get_trait_lvl_num,%#,%0,%q1))][setq(3,u(FUN_XP_TO_GO,%#,%0))]pemit(%#,switch(0,not(hasflag(%#,unregistered)),ansi(hr,Only approved characters can use this.),or(u(#FUDGE_FUN/fun_is_valid_skill,%0),u(#FUDGE_FUN/fun_is_valid_attr,%0)),ansi(hr,That is not a valid skill or attribute.),lte(%1,%q3),ansi(hr,You only need %q3 points to get to the next level.  Don't spend more than that.),isnum(%1),ansi(hr,That is not a number.),gt(%1,0),ansi(hr,You can't spend negative XP!),gte(xget(%#,xp),%1),ansi(hr,You don't have that many XP.),lt(%q2,3),ansi(hr,You can't improve that skill any more.),ansi(hg,You spend %1 XP on [capstr_all(%0,_)].)[set(#FUDGE_XP_DB,log_xpspent:[xget(#FUDGE_XP_DB,log_xpspent)]|%N spent %1 on %0)][u(fun_add_xp,%#,trim(%0),%1)][set(%#,xp:[sub(xget(%#,xp),%1)])]))
&FUN_ADD_XP XP System=localize([setq(0,xget(%0,XPSPENT))][setq(1,switch(match(%q0,%1:*),0,0,after(grab(%q0,%1:*),:)))][setq(2,sub(u(fun_xp_to_next_lvl,%0,%1),add(%q1,%2)))][setq(3,[switch(u(#FUDGE_FUN/fun_is_valid_skill,%1),1,skills,attributes)])][u(FUN_SET_XPSPENT,%0,[capstr_all(%1,_)],[add(%q1,%2)])][switch(lte(%q2,0),1,switch(u(FUN_CAN_IMPROVE,%0,%1),0,ansi(hr,You can't improve %1 without lowering something else first.),[pemit(%0,ansi(hb,Your %1 trait has improved.))][u(#FUDGE_FUN/fun_set_[switch(%q3,skills,SKILL,ATTR)],%0,[capstr_all(%1,_)],add(1,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1,%q3)))][u(FUN_SET_XPSPENT,%0,[capstr_all(%1,_)],[sub(0,%q2)])])
&FUN_CAN_IMPROVE XP System=localize([switch(u(#FUDGE_FUN/fun_is_valid_skill,%1),0,1,[setq(1,u(#FUDGE_FUN/fun_skills_above_lvl,%0,0))][setq(2,u(#FUDGE_FUN/fun_skills_above_lvl,%0,1))][setq(3,u(#FUDGE_FUN/fun_skills_above_lvl,%0,2))][switch(u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1,skills),0,setq(1,inc(%q1)),1,[setq(1,inc(%q1))][setq(2,inc(%q2))],2,[setq(1,inc(%q1))][setq(2,inc(%q2))][setq(3,inc(%q3))])][switch(1,gt(%q1,xget(#FUDGE_DB,max_skills_above_0)),setq(0,1),gt(%q2,xget(#FUDGE_DB,max_skills_above_1)),setq(0,1),gt(%q3,xget(#FUDGE_DB,max_skills_above_2)),setq(0,1),setq(0,0))][not(%q0)])
&FUN_GET_ATTR_XP_COST XP System=mul(after(grab(xget(#FUDGE_XP_DB,xp_skills_costs),%0:*),:),xget(#FUDGE_XP_DB,ATTR_COST_MULTIPLIER))
&FUN_GET_SKILL_XP_COST XP System=after(grab(xget(#FUDGE_XP_DB,xp_skills_costs),%0:*),:)
&FUN_SET_XPSPENT XP System=localize([setq(0,xget(%0,xpspent))][switch(0,gt(%2,0),set(%0,xpspent:[remove(%q0,extract(%q0,match(%q0,%1:*),1))]),match(%q0,%1:*),set(%0,xpspent:[trim(%q0%B%1:%2)]),set(%0,xpspent:[trim(find_and_replace(%q0,%1:*,%1:%2))]))])
&FUN_XP_TO_GO XP System=sub(u(fun_xp_to_next_lvl,%0,%1),switch(match(xget(%0,xpspent),%1:*),0,0,after(grab(xget(%0,xpspent),%1:*),:))
&FUN_XP_TO_NEXT_LVL XP System=switch(u(#FUDGE_FUN/fun_is_valid_skill,%1),1,u(fun_get_skill_xp_cost,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1,skills)),u(fun_get_attr_xp_cost,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1,attributes))
&MORE_HELP_+PRACTICE XP System=See +help XP
&MORE_HELP_+TRAIN XP System=See +help XP
&MORE_HELP_XP XP System=XP is awarded weekly to reflect your character learning and improving.  XP shows up on your character sheet.  You spend XP using the [ansi(h,+xp/spend)] command.  You don't have to save up all your points and spend them all at once.  In fact, you -can't-, as there is a maximum cap on how much XP you can have saved up ([xget(#FUDGE_XP_DB,XP_SAVE_CAP)] points).  Instead, you spend XP a little as a time as you're learning things.  Once you have spent enough points, you advance to the next level.%R%RYou can get bonus XP through training with other PCs.  When you RP being taught something, have the other player use the [ansi(h,+train)] command on you.   You will both get bonus XP.  You can only train/be trained once per week.  +train is more effective with the Teaching skill.%R%RYou may also get bonus XP by RPing practicing the skill *with other players*.  For example: target practice in the firing range.  For this, you use the [ansi(h,+practice)] command.  Again, you can only do this once per week.  [ansi(hr,Both +train and +practice are done on the honor system.  Use them only when supported by actual RP.)]%R%RAs in Chargen, there are limits on how many high skills you can have (+limits).  If you want to raise a new skill, you may need to first lower an existing one.  Nobody can be good at everything.  You can lower a skill using the [ansi(h,+xp/lower)] command.  You get back a fraction of the XP you spent to raise the skill.%R%R[ansi(h,+xp)] - Shows you a summary of what XP you've spent.%R[ansi(h,+xp/costs)] - Shows you the costs of improving a stat.%R[ansi(h,+xp/spend <skill or attribute>=<number of XP>)] - Spend XP on a stat.%R[ansi(h,+xp/lower <skill or attribute>)] - Lower a skill or attribute.%R%R[ansi(h,+practice <skill or attribute>)] - Use when RPing practice with other PCs.%R[ansi(h,+train <player>=<skill or attribute>)] - Use when RPing teaching someone.  The /teacher/ uses this command.
&SHELP_XP XP System=Staff can award bonus XP using the [ansi(h,+xp/award <player>=<# of XP>/<reason>)].%R%RYou can edit the skill costs for various levels on the #FUDGE_XP_DB object.
@STARTUP XP System=@set me=!no_command
@set XP System/STARTUP=no_command prefixmatch
&TR-WEEKLY-XP XP System=@dolist lsearch(all,type,player)=think [set(##,XP:[add(xget(##,xp),xget(#FUDGE_XP_DB,XP_PER_WEEK))])][switch(gt(xget(##,xp),xget(#FUDGE_XP_DB,xp_save_cap)),1,set(##,xp:[xget(#FUDGE_XP_DB,xp_save_cap)]))][set(##,has_trained:0)][set(##,has_been_trained:0)][set(##,has_lowered:0)][set(##,has_practiced:0)]
&CRON_JOB_XP XP System=@tr #FUDGE_CMD_XP/tr-weekly-xp
&CRON_TIME_XP XP System=||Sun|23|59|

@desc XP Data=Stores data for the XP system.  You can edit XP_SAVE_CAP, which is how many points players can carry over week to week, and XP_SKILLS_COSTS, which is how many XP it costs to raise skills to various levels (attributes are ATTR_COST_MULTIPLIER times as much), and XP_PER_WEEK, which is how many XP the players get each week.
&XP_SAVE_CAP XP Data=5
&XP_PER_WEEK XP Data=1
@set XP Data/XP_SAVE_CAP=visual
&XP_SKILLS_COSTS XP Data=-3:4 -2:8 -1:16 0:24 1:32 2:48 3:9999
&ATTR_COST_MULTIPLIER XP Data=3

@power Chargen Exit Parent = See_All
@DESCRIBE Chargen Exit Parent=Stores some functions common to chargen exits.  It will require that they have set something in every attribute listed in REQUIRED_ATTRS on the child exit.  It will also call a function OTHER_CHECKS, which should return 0 or 1 depending on whether there's anything else wrong.  If OTHER_CHECKS returns 0, the exit parent will call OTHER_ERRORS to tell the user what the problem is.
@FAILURE Chargen Exit Parent=ansi(hr,You have not set everything yet.[squish(iter(v(required_attrs),switch(strlen(xget(%#,##)),0,%R- Missing ##)))]%R[u(other_errors,%#)])
&ISDONE Chargen Exit Parent=[and(not(t(edit(iter(v(required_attrs),eq(strlen(xget(%#,##)),0)),%B,))),u(other_checks,%#))]
@lock/Basic Chargen Exit Parent=ISDONE/1
@lset Chargen Exit Parent/Basic=!no_inherit

@lock/Basic Profile Commands=me
@set Profile Commands = DARK
&CMD-+EYES Profile Commands=$+eyes *:think pemit(%#,ansi(hg,You set your eye color to: %0.))[set(%#,eyes:[capstr(%0)])]
&CMD-+HAIR Profile Commands=$+hair *:think pemit(%#,ansi(hg,You set your hair color to: %0.))[set(%#,hair:[capstr(%0)])]
&CMD-+HAND Profile Commands=$+hand *:think pemit(%#,switch(0,t(match(left right ambidextrous,%0)),ansi(hr,That is not a valid setting.  Use 'right' 'left' or 'ambidextrous'.),ansi(hg,You set your handeness to: %0.)[set(%#,hand:[capstr(%0)])]))
&CMD-+HEIGHT Profile Commands=$+height *:think pemit(%#,ansi(hg,You set your height to: %0.))[set(%#,height:%0)]
&CMD-+SKIN Profile Commands=$+skin *:think pemit(%#,ansi(hg,You set your skin color to: %0.))[set(%#,skin:[capstr(%0)])]
&CMD-+WEIGHT Profile Commands=$+weight *:think pemit(%#,ansi(hg,You set your weight to: %0.))[set(%#,weight:%0)]
@DESCRIBE Profile Commands=Chargen commands for setting physical profile.
@set Profile Commands/DESCRIBE=no_command visual prefixmatch public nearby
@STARTUP Profile Commands=@set me=!no_COMMAND
@set Profile Commands/STARTUP=no_command prefixmatch

@lock/Basic Demographic Commands=me
@set Demographic Commands = DARK
&cmd-+age Demographic Commands=$+age *:think pemit(%#,switch(0,isnum(%0),ansi(hr,Your name must be a number.),lte(%0,75),ansi(hr,You cannot be that old without special staff permission. Contact a member of staff.),gte(%0,11),ansi(hr,You cannot be that young without special staff permission.  Contact a member of staff.),[set(%#,birthdate:[rand(1,12)]/[rand(1,28)]/[sub(last(time()),%0)])][ansi(hg,You set your age to %0.%R%RYour birthdate has been randomly set to: [u(#FUDGE_CGINFO_FUN/fun_display_birthdate,%#)].  If you would like a different random birthday you can use the command again.  If you would like a specific birthday, contact a staff member.)]))
&CMD-+ORG Demographic Commands=$+org *:think pemit(%#,switch(0,u(#FUDGE_CGINFO_FUN/fun_is_valid_org,%0),ansi(hr,That is not a valid org. Use one of: [orgs()].),ansi(hg,You set your organization to %0.)[set(%#,org:[trim(capstr(%0))])]))
&CMD-+FACTION Demographic Commands=$+faction *:think pemit(%#,switch(0,t(match(factions(),%0)),ansi(hr,That is not a valid faction.  Use one of: [factions()].),ansi(hg,You set your faction to %0.)[set(%#,faction:[trim(capstr(%0))])]))
&CMD-+FULLNAME Demographic Commands=$+fullname *:think pemit(%#,ansi(hg,You set your full name to %0.))[set(%#,fullname:%0)]
&CMD-+POSITION Demographic Commands=$+position *:think pemit(%#,switch(0,u(#FUDGE_CGINFO_FUN/fun_is_valid_position,%0),ansi(hr,That is not a valid position.  See +positions.),ansi(hg,You set your position to %0.)[set(%#,position:[trim(capstr(%0))])])))
@DESCRIBE Demographic Commands=Chargen commands for setting demographic information.
@STARTUP Demographic Commands=@set me=!no_command

@lock/Basic Skill Chargen Commands=me
@set Skill Chargen Commands = DARK
&CMD-+LOWER Skill Chargen Commands=$+lower *:think [switch(1,u(#FUDGE_FUN/fun_is_valid_attr,%0),u(fun_attr_lower,%#,%0),u(fun_skill_lower,%#,%0))][u(fun_check,%#)]
&CMD-+POINTS Skill Chargen Commands=$+points:think pemit(%#,[ansi(hg,[xget(%#,attr_points)] Attribute Points Remaining)]%R[ansi(hm,[xget(%#,skill_points)] Skill Points Remaining)][u(fun_check,%#)])
&CMD-+RAISE Skill Chargen Commands=$+raise *:think [switch(1,u(#FUDGE_FUN/fun_is_valid_attr,%0),u(fun_attr_raise,%#,%0),u(fun_skill_raise,%#,%0))][u(fun_check,%#)]
&CMD-+START Skill Chargen Commands=$+start:think pemit(%#,ansi(hg,You can now raise your skills and attributes to the desired levels.%RAny existing skills have been reset.))[set(%#,skills:)][set(%#,attributes:[iter(sort(u(#FUDGE_FUN/fun_attr_list)),##:0)])][set(%#,skill_points:[xget(#FUDGE_DB,skill_points)])][set(%#,attr_points:[xget(#FUDGE_DB,attr_points)])];@dolist [u(#FUDGE_CGINFO_FUN/FUN_POSITION_PACKAGES,xget(%#,position))]=@fo %#=+package/take ##;@wait 2=@pemit %#=%R%R[ansi(hc,Remember, you can adjust the points that were spent automatically by the packages.  You can also take additional packages if you so desire.)]
&CMD-+PACKAGE-TAKE Skill Chargen Commands=$+package/take *:think [setq(0,u(#FUDGE_CGINFO_FUN/fun_package_cost,%0,%#))][pemit(%#,switch(0,u(#FUDGE_CGINFO_FUN/fun_is_valid_package,%0),ansi(hr,%0 is not a valid package.),gte(xget(%#,skill_points),%q0),ansi(hr,You don't have enough points for that.),[set(%#,skill_points:[sub(xget(%#,skill_points),%q0)])][u(#FUDGE_CGINFO_FUN/fun_apply_package,%0,%#)][ansi(hg,[capstr(%0)] package taken!  You have [xget(%#,skill_points)] skill points remaining.)]%R%T[u(#FUDGE_CGINFO_FUN/FUN_PACKAGE_LONG_DESC,%0)]))][u(fun_check,%#)]
@DESCRIBE Skill Chargen Commands=Commands for setting up skills and attributes.
&FUN_ATTR_LOWER Skill Chargen Commands=[setq(0,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1))][setq(1,sub(%q0,1))][setq(2,xget(%0,attr_points))][pemit(%0,switch(0,u(#FUDGE_FUN/fun_is_valid_attr,%1),ansi(hr,That is not a valid attribute.),gte(%q1,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)]),ansi(hr,You can't lower that attribute any further.),ansi(hg,You lower the %1 attribute to [u(#FUDGE_FUN/fun_print_name_and_num,%q1)].  You have [inc(%q2)] attribute points remaining.)[u(#FUDGE_FUN/fun_set_attr,%0,[capstr_all(%1)],%q1)][set(%0,attr_points:[inc(%q2)])]))]
&FUN_ATTR_RAISE Skill Chargen Commands=[setq(0,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1))][setq(1,add(%q0,1))][setq(2,xget(%0,attr_points))][pemit(%0,switch(0,u(#FUDGE_FUN/fun_is_valid_attr,%1),ansi(hr,That is not a valid attribute.),lte(%q1,[xget(#FUDGE_DB,MAX_TRAIT_LEVEL)]),ansi(hr,You can't raise that attribute any further.),gt(%q2,0),ansi(hr,You don't have any attribute points left.),ansi(hg,You raise the %1 attribute to [u(#FUDGE_FUN/fun_print_name_and_num,%q1)].  You have [dec(%q2)] attribute points remaining.)[u(#FUDGE_FUN/fun_set_attr,%0,[capstr_all(%1)],%q1)][set(%0,attr_points:[dec(%q2)])]))]
&FUN_SKILL_LOWER Skill Chargen Commands=[setq(0,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1))][switch(%q0,#-1,setq(0,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)]))][setq(1,sub(%q0,1))][setq(2,xget(%0,skill_points))][pemit(%0,switch(0,u(#FUDGE_FUN/fun_is_valid_skill,%1),ansi(hr,That is not a valid skill.),gte(%q1,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)]),ansi(hr,You can't lower that skill any further.),ansi(hg,You lower the %1 skill to [u(#FUDGE_FUN/fun_print_name_and_num,%q1)].  You have [inc(%q2)] skill points remaining.)[u(#FUDGE_FUN/fun_set_skill,%0,[capstr_all(%1)],%q1)][set(%0,skill_points:[inc(%q2)])]))]
&FUN_SKILL_RAISE Skill Chargen Commands=[setq(0,u(#FUDGE_FUN/fun_get_trait_lvl_num,%0,%1))][switch(%q0,#-1,setq(0,[xget(#FUDGE_DB,MIN_TRAIT_LEVEL)]))][setq(1,add(%q0,1))][setq(2,xget(%0,skill_points))][pemit(%0,switch(0,u(#FUDGE_FUN/fun_is_valid_skill,%1),ansi(hr,That is not a valid skill.),lte(%q1,[xget(#FUDGE_DB,MAX_TRAIT_LEVEL)]),ansi(hr,You can't raise that skill any further.),gt(%q2,0),ansi(hr,You don't have any skill points left.),ansi(hg,You raise the %1 skill to [u(#FUDGE_FUN/fun_print_name_and_num,%q1)].  You have [dec(%q2)] skill points remaining.)[u(#FUDGE_FUN/fun_set_skill,%0,[capstr_all(%1)],%q1)][set(%0,skill_points:[dec(%q2)])]))]
&FUN_CHECK_LEVELS Skill Chargen Commands=localize([setq(1,0)][setq(2,0)][setq(3,0)][iter(xget(%0,%1),switch(after(##,:),1,setq(1,inc(%q1)),2,setq(2,inc(%q2)),3,setq(3,inc(%q3)),>3,setq(3,inc(%q3))),,)][not(or(gt(add(%q1,%q2,%q3),xget(#FUDGE_DB,MAX_%1_ABOVE_0)),gt(add(%q2,%q3),xget(#FUDGE_DB,MAX_%1_ABOVE_1)),gt(%q3,xget(#FUDGE_DB,MAX_%1_ABOVE_2))))])
&OTHER_CHECKS Skill Chargen Commands=[and(u(FUN_CHECK_LEVELS,%0,skills),u(FUN_CHECK_LEVELS,%0,attributes))][switch(1,gt(xget(%0,skill_points),0),pemit(%0,ansi(hm,You didn't spend all of your skill points.)))][switch(1,gt(xget(%0,attr_points),0),pemit(%0,ansi(hm,You didn't spend all of your attribute points.)))]
&OTHER_ERRORS Skill Chargen Commands=[switch(u(FUN_CHECK_LEVELS,%0,skills),0,- You may only have [xget(#FUDGE_DB,MAX_SKILLS_ABOVE_2)] skill above Great\, [xget(#FUDGE_DB,MAX_SKILLS_ABOVE_1)] above Good and [xget(#FUDGE_DB,MAX_SKILLS_ABOVE_0)] above Fair.)][switch(u(FUN_CHECK_LEVELS,%0,attributes),0,%R- You may only have [xget(#FUDGE_DB,MAX_ATTRIBUTES_ABOVE_2)] attribute above Great\, [xget(#FUDGE_DB,MAX_ATTRIBUTES_ABOVE_1)] above Good and [xget(#FUDGE_DB,MAX_ATTRIBUTES_ABOVE_0)] above Fair.)]
&FUN_CHECK Skill Chargen Commands=localize([setq(0,[u(OTHER_ERRORS,%0)])][switch(u(OTHER_CHECKS,%0),0,[set(%0,CG_ERRORS:0|%q0)][pemit(%0,ansi(hr,%q0))],[set(%0,CG_ERRORS:1)])]


@pemit/silent %#=[ansi(hg,Setting up database numbers...)]%R

@wait 2=+install/updategroup FUDGE



