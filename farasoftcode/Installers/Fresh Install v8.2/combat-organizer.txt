This help file is aimed at people who are organizing FS3 Combat scenarios.  Typically this will be staff, but with FS3 anyone can run a combat.

+ Starting a Combat

Starting a new combat involves several steps. 
 
1. The organizer uses +combat/start to start the combat. This gives you the combat number, a unique ID for that combat. 
2. Join PCs and NPCs to the combat.
3. Trigger the first turn using +combat/newturn. 
 
Combat can be designated as 'mock' or 'real'. Mock combat represents training, sparring, paintball wars, etc.  Damage from a mock combat is erased as soon as the combat is over. 

Note: When you trigger the first '+combat/newturn', NPCs will automatically pick random targets.  Therefore, if you want to assign them to specific targets, be sure to do so **after** you trigger the first new turn.

[[code]]
+combat/start <mock or real> - Starts a combat. 
+combat/stop <combat #> - Stops a combat. 
+combat/all - Shows all combats going on. 
+combat/newturn - Starts the first turn.
[[/code]]

+ Joining People to Combat

The organizer can force other people (PCs or NPCs) to join the combat.  Often this is faster/simpler than paging a bunch of people with the combat number and expecting them to do it.

Your coder can define some custom combatant types.  This is handy for games with robots, bug-eyed monsters, space marines in full body armor, or other non-human combatants.  A custom combatant type will automatically set weapons, armor and vehicle type when you join someone to the combat.  (For example:  //+combat/join Centurion1=#123/Centurion// would automatically give Centurion1 the appropriate weapon and armor for a Cylon Centurion).

[[code]]
+combat/join <name>=<combat#>/<type>[/<vehicle>] - Joins someone else 
to combat 
If the name specified does not already exist as a PC or in the NPC 
database, a temporary NPC will be added with a random skill level. 
[[/code]]


+ Running and Participating in Combat

When you start a combat, you are added as an Observer, on the assumption that you're just there to watch and run the NPCs.   If your PC is also involved in the fight, you will need to leave combat (+combat/leave) and then rejoin as the appropriate combatant type.

+ Detailed Combat Info

In addition to the Combat HUD summary (visible through +combat), you can get detailed stats about a particular combatant.  You can also view a summary of the skill matchups (to ensure that NPCs aren't mis-matched in ability level to the PCs they're fighting) and a summary of what gear people have.

[[code]]
+combat <name> - Views someone's detailed combat status.
+combat/gear - Views a gear summary.
+combat/skills - Views a skill summary.
[[/code]]

+ Vehicles

FS3 does not use vehicle objects, but rather has a database of “virtual” vehicles.  You //can// create real vehicle objects with names matching their FS3 names, but it is not required.   When you join a combat as a pilot or passenger, you can specify a particular vehicle name (from the vehicle database, e.g. "Viper-123"), or a general vehicle type (e.g. "Viper").   When someone uses a general vehicle type, the system automatically generates a temporary vehicle in the database (e.g. "Viper-3568g"); this vehicle will be deleted when the combat is over.

Create vehicles in the database when you want to track vehicle repairs between combats.  Otherwise, just use the temporary ones - it's easier.

[[code]]
+vehicles - Views all vehicles 
+vehicle <name> - Views a specific vehicle. 
+vehicle/create <name>=<type> - Creates a vehicle 
+vehicle/delete <name> - Removes a vehicle 
+vehicle/notes <name> - Adds notes to a vehicle.
[[/code]]

+ NPCs

FS3 does not use objects for NPCs, but rather has a database of “virtual” NPCs. When you want to use a NPC in combat, you can either specify a pre-existing NPC from the database, or specify a temporary NPC name (like “Henchman27”) and the system will generate a temporary one for you. That temporary NPC will be deleted as soon as combat’s over.

Unlike PCs, who have a full character sheet, NPCs have only a single skill rating used for every roll they make.

[[code]]
+npcs - Shows NPCs 
+npc <name> - Shows a specific NPC 
+npc/create <name>=<skill> - Creates a NPC 
+npc/delete <name> - Deletes a NPC. Only the creator or staff can do 
this. 
+npc/skill <name>=<skill> - Changes a NPC's skill 
+npc/notes <name>=<notes> - Adds notes to a NPC
[[/code]]

++ Controlling NPCs in Combat

Someone must be responsible for posing for the NPC and entering their actions into the combat system.  This could be the organizer, another player who's PC is involved in the combat, or just someone who's there solely to run that particular NPC. 
 
Note: If you are only joining combat to run NPCs, you should join using the "NPCMaster" type.  
 
NPCs and PCs are treated fundamentally the same in combat. You target a NPC just by using his name, and there are versions of every combat command that allow you to specify a NPC as the actor. Only one exception: KO’d NPCs are immediately removed from the combat. They cannot be treated, rallied, or revived with a hero roll. 
 
All combat commands have versions for NPCs with the NPC’s name in front of them, used for setting the NPC's action.   Quick tip:  This also works on PCs too, in case someone is AFK or disconnected and you need to set their action for them.

[[code]]
+combat/weapon <npcname>=<weapon> 
+combat/attack <npcname>=<target>
[[/code]]

++ NPC Damage

The combat system remembers damage done to permanent NPCs, just like PCs.  This means they they will get hurt and heal up the same as the PCs. Temporary NPCs go away when the combat's over, erasing their damage.

+ Pose and Action Tracking

As the organizer, the combat system will notify you when everyone has posed and entered their actions into the system. If time is passing and you still haven't seen those messages, you can check the 'slackers' command to see who's snoozing. You can then choose to poke them, enter an action on their behalf, or simply skip over them. 

[[code]]
+combat/slackers - See at a glance who hasn't posed or chosen their actions.
[[/code]]

+ Teams

Teams are a convenient way of organizing combatants into smaller groups when they split up. PCs are automatically assigned to Team 1 and NPCs to Team 2. You can change someone's team at any time.

[[code]]
+combat/team <name>=<team#> - Switches teams. 
[[/code]]

+ Targets

PCs pick their targets when they aim or attack. NPCs do so automatically. By default, NPCs on Team 1 will aim at Team 2, Team 2 will aim at Team 1, and NPCs on other teams will aim at anyone not on their team. 
 
You can change this by targeting teams against specific other teams. They will only pick targets from the teams you specify. You can also list specific individuals as targets. For example, you can specify that teams 1 and 3 will target teams 2 and 4, but that Bob will specifically target Mary. 
 
**Please note!** These commands apply to ALL NPCs. If you have other NPCMasters in your combat, be sure to let them know that this will redirect their NPCs' targets, and they'll have to fix it. 
 
NPCs automatically pick an appropriate action and a target when the retarget command is triggered. They will keep their target until it's taken out or until someone does a retarget. However, you can manually force them to pick a new action or a specific target using one of the NPC combat commands.

[[code]]
+combat/target <name>=<target> - Forces someone to change targets 

+combat/teamtarget <team# list>=<team# list> - Sets up team targets 
   Example: +combat/target 1 3 = 2 4 (targets teams 1 and 3 at teams 2 
   and 4) Note that this does not affect targets for teams 2 and 4 - you 
   must set them separately. This team setting is remembered from one 
   turn to the next. 

+combat/retarget - Forces all NPCs to pick new random targets based on their team targets. 

+combat/retarget <attacker=target,attacker=target,etc.> - 
   NPCs on the list will pick specific targets and everyone else will pick 
   random targets 

+combat/randtarget <name>[/<num targets>] - Spits out a # of random 
    targets for 'name'.
[[/code]]

+ Modifiers 

Organizers may apply situational modifiers to characters based on things like darkness, rain, or what-have-you. A modifier is just like a skill roll modifier - a +/- number of dice. Do not use this for damage modifiers; they are factored in automatically.

[[code]]
+combat/mod <name>=<modifier, + or -> - Sets a situational modifier (not for damage!).
[[/code]]

+ Damage

There are several staff-only commands used to modify and inflict damage, to make adjustments for the inevitable cases where someone attacks someone they shouldn't have, or the combat system gets wonky. These are not available to general organizers; only staff.  All damage commands may be used on a PC, NPC or Vehicle.

[[code]]
+damage/mod <name>/<#>=<stat>/<level> - Modifies details of an injury. 
   See +damage/mod for the possible stat values. 

+damage/inflict <name>=<mock or real>/<hit location>/<weapon>/<physical 
or stun>/<severity> - Inflicts damage. May be used outside of combst. 

+damage/delete <name>/<#> - Deletes an injury 
+damage/clear <name> - Clears all damage (even healed damage) from the database. 
+combat/unko - Un-KO's someone who shouldn't have been (organizer only)
[[/code]]

+ Booby Traps and Unmanned Vehicles

It is possible that someday you may have a situation where there is an "unmanned" attacker or defender, be it a booby trapped grenade or an empty vehicle. The combat system doesn’t handle these situations, so you have two choices: 
 
1) Just RP it. Have folks make some appropriate +rolls and be done with it. You can even manually inflict the damage using +damage/inflict if it's important that it be in the combat system. 
2) Put in a dummy attacker or defender. If it's an unmanned vehicle target, just make a NPC pilot with a skill of 0 (thus making him so crappy he will never dodge). If it's an unmanned attacker like a mine, just make a NPC attacker with a skill appropriate to how well the mine was placed. 
 
As always, remember that the combat system is a tool to aid RP, and will never be able to account for all possible situations. 

+ Robots and AIs

A note about robots: Humanoid cyborgs/robots (Borg, Terminators, Cylon Centurions, etc.) should be treated as soldiers, with armor that covers their bodies. 
 
Vehicular robots (Cylon Raiders, Skynet HKs, etc.) should be treated like vehicles. A NPC represents their AI and act as their "pilot". 

Remember that custom combatant types (explained earlier) can be handy when dealing with non-humanoid combatants.

+ Balancing Combats

Lopsided combats are generally not much fun for either side, and sometimes may be downright detrimental to the theme/plot. As an organizer, it is important for you to balance the skills of PCs and NPCs to ensure a reasonably fair fight. You should also check to make sure everyone has the proper gear and stance setup. You can use the NPC command to adjust NPC skill levels. 
 
Another way to balance combat is to simply apply a modifier. Badguys kicking your players' butts and you don't want them to? Give a few of them a -10 modifier and watch the tables turn. 
 
You can also give someone a lethality modifier, which applies to weapon damage. This is also a percentage, just like the weapon's lethality rating. So if you really want to kill someone, set their opponent to have a huge to-hit modifier and lethality modifier :) 
 
Is this cheating? Yes and no. I would never advocate its use to maliciously pick on a PC.   But just as a gamemaster in a tabletop game sometimes rolls behind a screen and ignores the results to further the plot, MUSH Storytellers should be allowed the same flexibility. These commands let you “stack the deck” for dramatic effect. It is up to you to use them responsibly.

[[code]]
+combat/skills - Views a summary of combatant skills 
+combat/mod <name>=<modifier, + or -> - Sets a special modifier. 
+combat/lethal <name>=<modifier, + or -> - Sets a lethality modifier
[[/code]]

+ Bugs and Logs

Each combat maintains a log of what happened, along with debugging info. If you suspect a bug, you can email the appropriate section to Faraday. Just remember to do this before stopping combat, because otherwise it will be lost. 

[[code]]
+combat/log – Views debugging log
[[/code]]