@create FS3 Skill System
@set FS3 Skill System = WIZARD
@set FS3 Skill System = SAFE
&CMD-+ABILITIES FS3 Skill System=$+abilities:think pemit(%#,[line()]%R[ansi(hg,Attributes)][iter(lattr(#FS3DB/attribute*),%R[ljust(capstr(lcstr(after(##,_))),20)][u(#FS3DB/##)])]%R%R[ansi(hr,Action Skills)][iter(lattr(#FS3DB/actionskill*),%R[ljust(capstr(lcstr(after(##,_))),20)][u(#FS3DB/##)])]%R%R[ansi(hy,Background Skills)]%RYou can make up any background skill you like.  The following are just some examples.%R[table(xget(#FS3DB,background_skills),18,78)]%R[line()]
&CMD-+ATTRIBUTES FS3 Skill System=$+attributes:@fo %#=+abilities
&REM-+ROLL FS3 Skill System= %q0 = parsed roll params  %R %q1=ability %R %q2=ruling attr or blank %R  %q3=modifier or 0 %r %q4=roll result
&CMD-+ROLL FS3 Skill System=$+roll *:think switch(%0,* vs *,,[setq(0,u(#FS3FUN/fun_parse_roll_params,%0))][setq(1,extract(%q0,1,1,|))][setq(2,extract(%q0,2,1,|))][setq(3,extract(%q0,3,1,|))][setq(4,roll_ability(%#,%q1,%q3,%q2))][switch(1,not(u(#FS3FUN/FUN_IS_VALID_RATING,%q1)),pemit(%#,ansi(hr,%q1 is not a valid ability rating number.)),and(t(%q2),not(u(#FS3FUN/FUN_IS_VALID_ATTRIBUTE,%q2))),pemit(%#,ansi(hr,%q2 is not an attribute.)),and(t(%q3),not(isnum(%q3))),pemit(%#,ansi(hr,%q3 is not a valid modifier.)),u(#FS3FUN/fun_notify_roll_results,%l,[ansi(hy,<FS3>)] %N rolls [prettify(%0)]: [u(#FS3FUN/fun_pretty_success_level,%q4)].))])
&CMD-+ROLL-CASUAL FS3 Skill System=$+roll/casual *:think [setq(0,u(#FS3FUN/fun_parse_roll_params,%0))][setq(1,extract(%q0,1,1,|))][setq(2,extract(%q0,2,1,|))[setq(3,extract(%q0,3,1,|))][setq(4,roll_ability(%#,%q1,add(%q3,20),%q2))][switch(1,not(u(#FS3FUN/FUN_IS_VALID_RATING,%q1)),pemit(%#,ansi(hr,%q1 is not a valid ability rating number.)),and(t(%q2),not(u(#FS3FUN/FUN_IS_VALID_ATTRIBUTE,%q2))),pemit(%#,ansi(hr,%q2 is not an attribute.)),and(t(%q3),not(isnum(%q3))),pemit(%#,ansi(hr,%q3 is not a valid modifier.)),u(#FS3FUN/fun_notify_roll_results,%l,[ansi(hy,<FS3>)] %N rolls [prettify(%0)] [ansi(hy,*CASUAL*)]: [u(#FS3FUN/fun_pretty_success_level,%q4)].))])
&REM_+ROLL_OPPOSED FS3 Skill System=%q0 = parsed roll params A  %R%T %q1 = A ability %R%T  %q2 = A ruling attr or blank   %R%T   %q3 = A modifier  %R%T   %q4 = A result  %R%R   %q5 = B parsed params %R%T %q6 = B ability %R%T  %q7 = B ruling attr or blank   %R%T   %q8 = B modifier  %R%T   %q9 = B result  %R%R   %qa = Opposed result text
&CMD-+ROLL-OPPOSED FS3 Skill System=$+roll *=* vs *=*:think [setq(0,u(#FS3FUN/fun_parse_roll_params,%1))][setq(1,extract(%q0,1,1,|))][setq(2,extract(%q0,2,1,|))][setq(3,extract(%q0,3,1,|))][setq(4,roll_ability(pmatch(%0),%q1,%q3,%q2))][setq(5,u(#FS3FUN/fun_parse_roll_params,%3))][setq(6,extract(%q5,1,1,|))][setq(7,extract(%q5,2,1,|))][setq(8,extract(%q5,3,1,|))][setq(9,roll_ability(pmatch(%2),%q6,%q8,%q7))][setq(a,u(#FS3FUN/FUN_GET_OPPOSED_RESULT,%0,%q4,%2,%q9))][switch(1,not(u(#FS3FUN/FUN_IS_VALID_RATING,%q1)),pemit(%#,ansi(hr,%q1 is not a valid ability rating number.)),not(u(#FS3FUN/FUN_IS_VALID_RATING,%q6)),pemit(%#,ansi(hr,%q6 is not a valid ability rating number.)),and(t(%q2),not(u(#FS3FUN/FUN_IS_VALID_ATTRIBUTE,%q2))),pemit(%#,ansi(hr,%q2 is not an attribute.)),and(t(%q3),not(isnum(%q3))),pemit(%#,ansi(hr,%q3 is not a valid modifier.)),and(t(%q7),not(u(#FS3FUN/FUN_IS_VALID_ATTRIBUTE,%q7))),pemit(%#,ansi(hr,%q7 is not an attribute.)),and(t(%q8),not(isnum(%q8))),pemit(%#,ansi(hr,%q8 is not a valid modifier.)),u(#FS3FUN/fun_notify_roll_results,%l,[ansi(hy,<FS3>)] [capstr(%0)] [prettify(%1)] vs [capstr(%2)] [prettify(%3)]%R<%T[capstr(%0)]: [u(#FS3FUN/FUN_PRETTY_SUCCESS_LEVEL,%q4)][space(10)][capstr(%2)]: [u(#FS3FUN/FUN_PRETTY_SUCCESS_LEVEL,%q9)]%R<%T%T%qa)]
&CMD-+SHEET FS3 Skill System=$+sheet:think pemit(%#,u(#FS3FUN/fun_display_sheet,%#))
&CMD-+SHEET-OTHER FS3 Skill System=$+sheet *:think pemit(%#,switch(0,or(isstaff(%#),xget(#FS3DB,PLAYER_VISIBLE_SHEETS)),ansi(hr,That command is restricted to staff.),t(pmatch(%0)),ansi(hr,That is not a valid player.),u(#FS3FUN/fun_display_sheet,pmatch(%0))))
&CMD-+SKILLS FS3 Skill System=$+skills:@fo %#=+abilities
&CREDITS FS3 Skill System=Version [v(version)]%R%RCoded by Faraday ~ http://www.wordsmyth.org/faraday%R%RThe FS3 system is copyright 2007-2008 by Linda O'Meara (aka Faraday). All rights reserved. You may reproduce and distribute part or all of these rules and create derivative works (games using FS3) providing a) You don't make any money from it, and b) You include this FS3 copyright and license notice in the distribution.
@DESCRIBE FS3 Skill System=These are the commands for the FS3 skills system.%R%R[u(Credits)]
@STARTUP FS3 Skill System=@function ability_level=#FS3FUN,fun_ability_level;@function roll_ability=#FS3FUN,fun_roll_ability
@set FS3 Skill System/STARTUP=no_command prefixmatch
&VERSION FS3 Skill System=2.0


@create FS3 Skill Data
@describe FS3 Skill Data=Stores FS3 skill data.
@set FS3 Skill Data = NO_COMMAND
&ACTIONSKILL_ALERTNESS FS3 Skill Data=Noticing things and being aware of your surroundings.
&ACTIONSKILL_DEMOLITIONS FS3 Skill Data=Blowing crap up.
&ACTIONSKILL_DRIVE FS3 Skill Data=Driving ground vehicles.
&ACTIONSKILL_ECM FS3 Skill Data=Operating electronic countermeasure systems.
&ACTIONSKILL_FIREARMS FS3 Skill Data=Shooting pistols, rifles and personal guns.
&ACTIONSKILL_FIRSTAID FS3 Skill Data=Basic first aid and paramedic medicine. Doesn't cover advanced medicine.
&ACTIONSKILL_GUNNERY FS3 Skill Data=Shooting big vehicle and ship weapons.
&ACTIONSKILL_MEDICINE FS3 Skill Data=Doctor skills.  Use FirstAid for first aid.
&ACTIONSKILL_MELEE FS3 Skill Data=Fighting with fists, knives, and hand to hand weapons.
&ACTIONSKILL_PILOTING FS3 Skill Data=Flying planes and other airborne vehicles.
&ACTIONSKILL_REPAIR FS3 Skill Data=Fixing things using mechanics or electronics.
&ACTIONSKILL_STEALTH FS3 Skill Data=Being sneaky.

&ATTRIBUTE_ACADEMIC FS3 Skill Data=Book learning and scientific pursuits.
&ATTRIBUTE_CREATIVE FS3 Skill Data=Artistic and creative endeavors.
&ATTRIBUTE_TECHNICAL FS3 Skill Data=Working with gizmos.
&ATTRIBUTE_ATHLETIC FS3 Skill Data=Running, jumping, and the like.
&ATTRIBUTE_REACTIVE FS3 Skill Data=Things involving good reaction and hand/eye coordination, like driving, piloting, shooting, etc.
&ATTRIBUTE_SOCIAL FS3 Skill Data=Dealing with people. 

&BACKGROUND_SKILLS FS3 Skill Data=Acting Astronomy Chess Cooking Dancing Finance Gardening Gymnastics History Hunting Juggling Mathematics Needlepoint Novels Painting Philosophy Photography Physics Poetry Pyramid Roleplaying Sailing Sculpture Singing SleightOfHand Swimming Triad Trumpet Writing
&PLAYER_VISIBLE_SHEETS FS3 Skill Data=1
&RULING_ATTR FS3 Skill Data=Alertness:Reactive Demolitions:Technical Drive:Reactive ECM:Technical Firearms:Reactive FirstAid:Technical Gunnery:Technical Medicine:Academic Melee:Athletic Piloting:Reactive Repair:Technical Stealth:Athletic

&TOP_SHEET FS3 Skill Data=[name(%0)]
&BOTTOM_SHEET FS3 Skill Data=[ljust([ansi(hc,Experience Points:)] [xget(%0,XP)],38)][ansi(hc,Luck Points:)] [xget(%0,LUCK_POINTS)]

@create FS3 Skill Functions
@describe FS3 Skill Functions=Stores FS3 skill functions.
@set FS3 Skill Functions = WIZARD

&REM_ABILITY_LEVEL FS3 Skill Functions=%0 = player, %1=ability.  returns level, default 5
&FUN_ABILITY_LEVEL FS3 Skill Functions=localize([switch(1,isnum(%1),%1,not(pmatch(%0)),5,[setq(0,0)][iter(attributes actionskills bgskills,switch(t(grab(xget(%0,##),%1:*)),1,setq(0,after(grab(xget(%0,##),%1:*),:))),,)]%q0)])

&FUN_ABILITY_TYPE FS3 Skill Functions=switch(1,hasattr(#FS3DB,attribute_%1),attribute,hasattr(#FS3DB,actionskill_%1),action,background)
&FUN_ATTRIBUTES FS3 Skill Functions=iter(lattr(#FS3DB/ATTRIBUTE_*),after(##,_))
&FUN_DISPLAY_SHEET FS3 Skill Functions=[line()]%R[u(#FS3DB/TOP_SHEET,%0)]%R[ansi(hg,Attributes)]%R[line2()]%R[table(iter(u(FUN_ATTRIBUTES),[padstr(ansi(h,[prettify(##)]:),15)]%B[u(#FS3FUN/fun_print_level,ability_level(%0,##),attribute)],,|),37,78,|)]%R%R[ansi(hr,Action Skills)]%R[line2()]%R[table(iter(sort(xget(%0,actionskills)),[padstr(ansi(h,[prettify(before(##,:))]:),15)]%B[u(#FS3FUN/fun_print_level,after(##,:),skill)],,|),37,78,|)]%R%R[ansi(hy,Background Skills)]%R[line2()]%R[table(iter(sort(xget(%0,bgskills)),[padstr(ansi(h,[before(##,:)]:),15)]%B[u(#FS3FUN/fun_print_level,after(##,:),skill)],,|),37,78,|)]%R%R[u(#FS3DB/BOTTOM_SHEET)]%R[line()]
&FUN_IS_VALID_ACTION FS3 Skill Functions=hasattr(#FS3DB,actionskill_%0)
&FUN_IS_VALID_ATTRIBUTE FS3 Skill Functions=hasattr(#FS3DB,attribute_%0)
&FUN_IS_VALID_BACKGROUND FS3 Skill Functions=1
&FUN_IS_VALID_RATING FS3 Skill Functions=and(isnum(%0),lte(%0,12),gte(%0,1))
&FUN_LEVEL_BRACKET FS3 Skill Functions=switch(%1,attribute,switch(%0,>9,Exceptional,>6,Good,>3,Average,Poor),switch(%0,>9,Expert,>6,Veteran,>3,Professional,Rookie))
&FUN_NOTIFY_ROLL_RESULTS FS3 Skill Functions=[remit(%0,%1)][cemit(FS3,[ansi(hc,<FS3>)] %1
&FUN_PRETTY_SUCCESS_LEVEL FS3 Skill Functions=localize([setq(0,switch(%0,-2,hR|Miserable Failure,-1,hr|Bad Failure,0,r|Failure,1,g|Success,2,hg|Good Success,3,hG|Amazing Success))][ansi(before(%q0,|),after(%q0,|))])
&FUN_PRINT_LEVEL FS3 Skill Functions=[ljust(%0,2)] \([u(fun_level_bracket,%0,%1)]\)

&REM_PARSE_ROLL_PARAMS FS3 Skill Functions=ability|ruling attr or empty|modifier or 0
&FUN_PARSE_ROLL_PARAMS FS3 Skill Functions=localize([switch(%0,*/*+*,[setq(0,[before(%0,/)])][setq(1,[before(after(%0,/),+)])][setq(2,[after(%0,+)])],*/*-*,[setq(0,[before(%0,/)])][setq(1,[before(after(%0,/),-)])][setq(2,sub(0,[after(%0,-)]))],*+*,[setq(0,[before(%0,+)])][setq(1,)][setq(2,[after(%0,+)])],*-*,[setq(0,[before(%0,-)])][setq(1,)][setq(2,sub(0,[after(%0,-)]))],*/*,[setq(0,[before(%0,/)])][setq(1,[after(%0,/)])][setq(2,0)],[setq(0,%0)][setq(1,)][setq(2,0)])]%q0|%q1|%q2)

&REM_ROLL_ABILITY FS3 Skill Functions=%0 = player DB, %1 = ability, %2 = modifier, %3 = attribute.  Returns Succ Level %R%R  %q0 = ruling attr mod   %q1 = total mod
&FUN_ROLL_ABILITY FS3 Skill Functions=localize([setq(0,u(fun_ruling_attr_mod,%0,%1,%3))][setq(1,add(%2,%q0))][extract(v(ROLLRESULTS_[ability_level(%0,%1)]),u(FUN_ROLL_DICE,%q1),1,1)])

&REM_RULING_ATTR_MOD FS3 Skill Functions=%0 = player DB, %1 = ability, %2 = attr override (opt)
&FUN_RULING_ATTR_MOD FS3 Skill Functions=localize([setq(0,switch(u(fun_ability_type,%0,%1),attribute,0,action,after(grab(xget(#FS3DB,ruling_attr),%1:*,:),default(%0/ruling_attr,Academic)))][switch(0,%q0,0,t(pmatch(%0)),0,mul(sub(5,ability_level(%0,switch(t(%q2),1,%q2,%q0))),2))])

&REM_ROLL_DICE FS3 Skill Functions=%0 = modifier
&FUN_ROLL_DICE FS3 Skill Functions=localize([setq(0,rand(1,100))][setq(1,switch(%q0,1,1,add(%q0,%0)))][min(max(%q1,100),1)])

@STARTUP FS3 Skill Functions=
@set FS3 Skill Functions/STARTUP=no_command prefixmatch






&MAX_HIGH_ABILITIES FS3 Skill Data=4
&MAX_POINTS_ACTION FS3 Skill Data=28
&MAX_POINTS_ATTRIBUTES FS3 Skill Data=40
&STARTING_POINTS FS3 Skill Data=75


@create Ability Chargen Commands
@link Ability Chargen Commands = #754
@set Ability Chargen Commands = DARK
@set Ability Chargen Commands = WIZARD
@set Ability Chargen Commands = SAFE
&CMD-+ABILITY Ability Chargen Commands=$+ability */*=*:think pemit(%#,switch(isnum(%2),0,ansi(hr,That is not a valid rating.),u(fun_set,[trim(%0)],[prettify(edit(%1,%B,_))],sub(%2,ability_level(%#,%1))))
&CMD-+LIMITS Ability Chargen Commands=$+limits:think pemit(%#,[line()]%R[ansi(h,Ability Limits in Chargen)]%R%RYou can't spend more than [xget(#FS3DB,max_points_attributes)] points on attributes%RYou can't spend more than [xget(#FS3DB,max_points_action)] points on action skills.%RYou can't have more than [xget(#FS3DB,max_high_abilities)] abilities \(including attributes\) above level 6.%R[line()])
&CMD-+LOWER Ability Chargen Commands=$+lower */*:think pemit(%#,u(fun_set,[trim(%0)],[prettify(edit(%1,%B,_))],-1))
&CMD-+LOWER-ERROR Ability Chargen Commands=$+lower *:think switch(%0,*/*,,pemit(%#,ansi(hr,Remember to specify a type\, such as +lower attribute/strength.)))
&CMD-+POINTS Ability Chargen Commands=$+points:think pemit(%#,u(#1572/fun_display_points,%#))
&CMD-+RAISE Ability Chargen Commands=$+raise */*:think pemit(%#,u(fun_set,[trim(%0)],[prettify(edit(%1,%B,_))],1))
&CMD-+RAISE-ERROR Ability Chargen Commands=$+raise *:think switch(%0,*/*,,pemit(%#,ansi(hr,Remember to specify a type\, such as +raise attribute/strength.)))
&CMD-+RESET Ability Chargen Commands=$+reset:think pemit(%#,ansi(hg,You reset your skills and attributes.))[set(%#,attributes:[iter(lattr(#FS3DB/attribute_*),[capstr(lcstr(after(##,_)))]:4)])][iter(profskills bgskills actionskills,set(%#,##:))]
&FUN_RAISE_ATTRIBUTE Ability Chargen Commands=[ability_level(%#,%0)]
&FUN_SET Ability Chargen Commands=[setq(0,ability_level(%#,%1))][setq(1,add(%q0,%2))][setq(2,switch(%0,attribute,attributes,attr,attributes,action,actionskills,act,actionskills,prof,profskills,profession,profskills,bg,bgskills,background,bgskills))][switch(0,match(v(types),%0),ansi(hr,That is not a valid type.  Use one of these: [v(types)].),u(#FS3FUN/fun_is_valid_%0,%1),ansi(hr,That is not a valid ability name for a %0 ability.),gte(%q1,0),ansi(hr,You cannot lower that ability that far.),lte(%q1,12),ansi(hr,You cannot raise that ability that far.),not(and(match(%q2,attributes),eq(%q1,0))),ansi(hr,You cannot lower an attribute below 1.),not(and(hasattr(#FS3DB,attribute_%1),not(match(%q2,attributes)))),ansi(hr,%1 is an attribute.  You can't take it as a skill.),not(and(hasattr(#FS3DB,actionskill_%1),not(match(%q2,actionskills)))),ansi(hr,%1 is an action skill.  You can't take it as a %0.),not(and(t(grab(xget(%#,profskills),%1:*)),match(%q2,bgskills))),ansi(hr,You already have %1 as a profession skill.  You can't take it as a background also.),not(and(t(grab(xget(%#,bgskills),%1:*)),match(%q2,profskills))),ansi(hr,You already have %1 as a background skill.  You can't take it as a profession also.),ansi(hg,You [switch(%2,>0,raise,lower)] your %1 ability to %q1.)[switch(%q2,bgskills,%R%R[ansi(hm,Remember - background skills are for hobbies\, education and random knowledge.  If something is directly covered by your profession skill you don't need to also take it as a background skill.)])]%R%R[switch(%q1,0,set(%#,%q2:[find_and_replace(xget(%#,%q2),%1:*,)]),switch(t(grab(xget(%#,%q2),%1:*)),1,set(%#,%q2:[find_and_replace(xget(%#,%q2),%1:*,%1:%q1)]),set(%#,%q2:[squish([xget(%#,%q2)]%B%1:%q1)])))][u(#1572/fun_display_points,%#)])
@STARTUP Ability Chargen Commands=@set me=!no_command
@set Ability Chargen Commands/STARTUP=no_command
&TYPES Ability Chargen Commands=attribute action profession background attr act prof bg
@open Next;N
@link Next = #1571
@parent Next=#1771
@lock/Basic Next=ISDONE/1
@lset Next/Basic=no_inherit
@power Next = See_All
&FUN_AVAILABLE_POINTS Next=ceil(add(xget(#FS3DB,starting_points),mul(.75,sub(first(xget(%0,education),|),12)),div(sub(age(%0),20),3)))
&FUN_CHECK_LEVELS Next=localize([setq(1,0)][setq(2,0)][setq(3,0)][iter(xget(%0,%1),switch(after(##,:),1,setq(1,inc(%q1)),2,setq(2,inc(%q2)),3,setq(3,inc(%q3))),,)][not(or(gt(add(%q1,%q2,%q3),xget(#120,MAX_%1_ABOVE_0)),gt(add(%q2,%q3),xget(#120,MAX_%1_ABOVE_1)),gt(%q3,xget(#120,MAX_%1_ABOVE_2))))])
&FUN_DISPLAY_POINTS Next=localize([setq(0,u(fun_points_left,%0))][setq(1,u(fun_spent_on,%0,attributes))][setq(2,u(fun_spent_on,%0,actionskills))][setq(3,u(fun_high_abilities,%0))][line()]%RYou have spent [ansi(h,u(fun_spent_points,%0))] of your [ansi(h,u(fun_available_points,%0))] available points.%R[switch(%q0,<0,ansi(hr,[abs(%q0)] points overspent.),ansi(hg,%q0 points remaining.))][switch(gt(%q1,xget(#FS3DB,max_points_attributes)),1,%R%R[ansi(hr,You have spent too many points on attributes.%R%TYou have spent %q1.  You may only spend [xget(#FS3DB,max_points_attributes)].)])][switch(gt(%q2,xget(#FS3DB,max_points_action)),1,%R%R[ansi(hr,You have spent too many points on action skills.%R%TYou have spent %q2.  You may only spend [xget(#FS3DB,max_points_action)].)])][switch(gt(%q3,xget(#FS3DB,max_high_abilities)),1,%R%R[ansi(hr,You have too many high abilities.%R%TYou have %q3 abilities above level 7.  You may only have [xget(#FS3DB,max_high_abilities)].)])]%R[line()]
&FUN_HIGH_ABILITIES Next=localize([setq(0,0)][iter(attributes actionskills profskills bgskills,iter(xget(%0,##),switch(after(itext(0),:),>6,setq(0,inc(%q0))),,),,)]%q0)
&FUN_POINTS_LEFT Next=sub(u(fun_available_points,%0),u(fun_spent_points,%0))
&FUN_SPENT_ON Next=localize([setq(0,0)][iter(xget(%0,%1),setq(0,add(%q0,after(itext(0),:))),,)]%q0)
&FUN_SPENT_POINTS Next=localize([setq(0,0)][iter(attributes actionskills profskills bgskills,setq(0,add(%q0,u(fun_spent_on,%0,##))),,)]%q0)
&OTHER_CHECKS Next=localize([setq(0,u(fun_points_left,%0))][setq(1,u(fun_spent_on,%0,attributes))][setq(2,u(fun_spent_on,%0,actionskills))][setq(3,u(fun_high_abilities,%0))][switch(1,lt(%q0,0),0,gt(%q1,xget(#FS3DB,max_points_attributes)),0,not(words(xget(%0,profskills))),0,not(words(xget(%0,bgskills))),0,gt(%q2,xget(#FS3DB,max_points_action)),0,gt(%q3,xget(#FS3DB,max_high_abilities)),0,1)])
&OTHER_ERRORS Next=[switch(0,words(xget(%0,profskills)),- You must have at least one profession skill.%R)][switch(0,words(xget(%0,bgskills)),- You must have at least one background skill.%R)]%R[u(fun_display_points,%0)]
&REQUIRED_ATTRS Next=attributes
